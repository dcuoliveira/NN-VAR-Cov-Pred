network <- "random"
B <- matrix(data = NA, nrow = K, ncol = K * P)
i <- 1
for (k in 1:K){
j <- 1
for (p in 1:(K * P)){
coin <- rbinom(n = 1, size = 1, prob = prob)
if (coin == 1){
B[i, j] <- runif(n = 1, min = -1, max = 1)
}else{
B[i, j] <- 0
}
j <- j + 1
}
i <- i + 1
}
var_sim <- VAR.sim(B = B, n = T, include = "none")
ts.plot(var_sim, col=c(1:K))
P <- 1
T <- 100
K <- 150
seed <- 02021994
prob <- 0.5
network <- "random"
B <- matrix(data = NA, nrow = K, ncol = K * P)
i <- 1
for (k in 1:K){
j <- 1
for (p in 1:(K * P)){
coin <- rbinom(n = 1, size = 1, prob = prob)
if (coin == 1){
B[i, j] <- runif(n = 1, min = -1, max = 1)
}else{
B[i, j] <- 0
}
j <- j + 1
}
i <- i + 1
}
var_sim <- VAR.sim(B = B, n = T, include = "none")
ts.plot(var_sim, col=c(1:K))
B
P <- 1
T <- 100
K <- 150
seed <- 02021994
prob <- 0.5
network <- "random"
B <- matrix(data = NA, nrow = K, ncol = K * P)
i <- 1
for (k in 1:K){
j <- 1
for (p in 1:(K * P)){
coin <- rbinom(n = 1, size = 1, prob = prob)
if (coin == 1){
B[i, j] <- runif(n = 1, min = -1, max = 1)
}else{
B[i, j] <- 0
}
j <- j + 1
}
i <- i + 1
}
var_sim <- VAR.sim(B = B, n = T, include = "none")
ts.plot(var_sim, col=c(1:K))
P <- 1
T <- 100
K <- 150
seed <- 02021994
prob <- 0.1
network <- "random"
B <- matrix(data = NA, nrow = K, ncol = K * P)
i <- 1
for (k in 1:K){
j <- 1
for (p in 1:(K * P)){
coin <- rbinom(n = 1, size = 1, prob = prob)
if (coin == 1){
B[i, j] <- runif(n = 1, min = -1, max = 1)
}else{
B[i, j] <- 0
}
j <- j + 1
}
i <- i + 1
}
var_sim <- VAR.sim(B = B, n = T, include = "none")
ts.plot(var_sim, col=c(1:K))
beta <- B %>% as.data.table()
colnames(beta) <- gsub("V", "", colnames(beta))
dgp_data <- var_sim %>% as.data.table()
corr_dgp <- corr_combination_2x2(data = dgp_data, p = P)
betas_dgp <- beta %>% mutate(eq = row.names(beta)) %>% dplyr::select(eq, everything())
y_dgp <- melt(betas_dgp, id = c("eq")) %>% as.data.table() %>%
rename(betas_dgp = value) %>% mutate(eq = as.character(eq), variable=as.character(variable))
betas_corr_df <- cbind(y_dgp %>% dplyr::select(betas_dgp), corr_dgp %>% dplyr::select(corr_estimate)) %>% as.data.table()
plot(x = betas_corr_df$corr_estimate, y = betas_corr_df$betas_dgp)
rm(list = ls())
library("dplyr")
library("data.table")
library("SparseTSCGM")
FILE_PATH <- getwd()
source(file.path(FILE_PATH, "utils", "Rutils.R"))
MODELS <- "ar1" # nolint
N <- 100 # nolint
K_INIT <- 3 # nolint
SEED <- 02021994 # nolint
PROB_OF_CONNECTION <- 0.5 # nolint
NETWORKS <- "random" # nolint
p <- as.integer(str_split(MODELS, "ar")[[1]][2])
mts <- sim.data(model = MODELS,
time = 1,
n.obs = N,
n.var = K_INIT,
seed = SEED,
prob0 = PROB_OF_CONNECTION,
network = NETWORKS)
mts$gamma
mts$gamma %>% t()
dgp_data <- mts$data1 %>% longitudinal_to_data.table()
dgp_data
vars::VAR(y = mts$gamma , p = 1)
vars::VAR(y = dgp_data, p = 1, type = c("none"))
mts$gamma
mts$gamma %>% t()
vars::VAR(y = dgp_data, p = 1, type = c("none"))
mts$gamma %>% t()
rm(list = ls())
library("dplyr")
library("data.table")
library("tsDyn")
FILE_PATH <- getwd()
source(file.path(FILE_PATH, "utils", "Rutils.R"))
rm(list = ls())
library("dplyr")
library("data.table")
library("tsDyn")
FILE_PATH <- getwd()
source(file.path(FILE_PATH, "utils", "Rutils.R"))
M <- createSparseMatrix(N = K, sparsity = prob, method = "normal", stationary = TRUE)
library("sparsevar")
M <- createSparseMatrix(N = K, sparsity = prob, method = "normal", stationary = TRUE)
P <- 1
T <- 100
K <- 150
seed <- 02021994
prob <- 0.1
network <- "random"
M <- createSparseMatrix(N = K, sparsity = prob, method = "normal", stationary = TRUE)
M
rm(list = ls())
library("dplyr")
library("data.table")
library("tsDyn")
library("sparsevar")
FILE_PATH <- getwd()
source(file.path(FILE_PATH, "utils", "Rutils.R"))
P <- 1
T <- 100
K <- 150
seed <- 02021994
prob <- 0.1
network <- "random"
B <- createSparseMatrix(N = K, sparsity = prob, method = "normal", stationary = TRUE)
var_sim <- VAR.sim(B = B, n = T, include = "none")
ts.plot(var_sim, col=c(1:K))
var_sim
dim(var_sim)
P <- 1
T <- 10000
K <- 150
seed <- 02021994
prob <- 0.1
network <- "random"
B <- createSparseMatrix(N = K, sparsity = prob, method = "normal", stationary = TRUE)
var_sim <- VAR.sim(B = B, n = T, include = "none")
ts.plot(var_sim, col=c(1:K))
var_sim <- simulateVAR(N = K, p = p, nobs = T, sparsity=prob)
var_sim <- simulateVAR(N = K, p = P, nobs = T, sparsity=prob)
var_sim
ts_dgp_df <- var_sim$series
ts_dgp_df <- var_sim$series %>% as.data.table()
ts.plot(ts_dgp_df, col=c(1:K))
B <- var_sim$A
B
dim(var_sim$A)
B <- dim(var_sim$A[[1]])
dim(var_sim$A[[1]])
ts.plot(ts_dgp_df, col=c(1:K))
P <- 1
T <- 10000
K <- 150
seed <- 02021994
prob <- 0.1
network <- "random"
var_sim <- simulateVAR(N = K, p = P, nobs = T, sparsity=prob)
ts_dgp_df <- var_sim$series %>% as.data.table()
B <- var_sim$A[[1]]
ts.plot(ts_dgp_df, col=c(1:K))
beta <- B %>% as.data.table()
colnames(beta) <- gsub("V", "", colnames(beta))
dgp_data <- var_sim %>% as.data.table()
dgp_data <- ts_dgp_df %>% as.data.table()
dgp_data
corr_dgp <- corr_combination_2x2(data = dgp_data, p = P)
beta <- B %>% as.data.table()
colnames(beta) <- gsub("V", "", colnames(beta))
dgp_data <- ts_dgp_df %>% as.data.table()
corr_dgp <- corr_combination_2x2(data = dgp_data, p = P)
P <- 1
T <- 100
K <- 150
seed <- 02021994
prob <- 0.1
network <- "random"
var_sim <- simulateVAR(N = K, p = P, nobs = T, sparsity=prob)
ts_dgp_df <- var_sim$series %>% as.data.table()
B <- var_sim$A[[1]]
ts.plot(ts_dgp_df, col=c(1:K))
beta <- B %>% as.data.table()
colnames(beta) <- gsub("V", "", colnames(beta))
dgp_data <- ts_dgp_df %>% as.data.table()
corr_dgp <- corr_combination_2x2(data = dgp_data, p = P)
corr_dgp
betas_dgp <- beta %>% mutate(eq = row.names(beta)) %>% dplyr::select(eq, everything())
y_dgp <- melt(betas_dgp, id = c("eq")) %>% as.data.table() %>%
rename(betas_dgp = value) %>% mutate(eq = as.character(eq), variable=as.character(variable))
betas_corr_df <- cbind(y_dgp %>% dplyr::select(betas_dgp), corr_dgp %>% dplyr::select(corr_estimate)) %>% as.data.table()
plot(x = betas_corr_df$corr_estimate, y = betas_corr_df$betas_dgp)
betas_corr_no_zero_df <- betas_corr_df %>% filter(betas_dgp != 0)
plot(x = betas_corr_no_zero_df$corr_estimate, y = betas_corr_no_zero_df$betas_dgp)
betas_corr_no_zero_positive_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp > 0))
plot(x = betas_corr_no_zero_positive_df$corr_estimate, y = betas_corr_no_zero_positive_df$betas_dgp)
betas_corr_no_zero_positive_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp < 0))
plot(x = betas_corr_no_zero_positive_df$corr_estimate, y = betas_corr_no_zero_positive_df$betas_dgp)
plot(x = betas_corr_no_zero_positive_df$corr_estimate, y = log(betas_corr_no_zero_positive_df$betas_dgp))
plot(x = betas_corr_no_zero_positive_df$corr_estimate, y = betas_corr_no_zero_positive_df$betas_dgp)
plot(x = log(betas_corr_no_zero_positive_df$corr_estimate), y = betas_corr_no_zero_positive_df$betas_dgp)
plot(x = betas_corr_no_zero_positive_df$corr_estimate, y = betas_corr_no_zero_positive_df$betas_dgp)
corr_dgp <- cov_combination_2x2(data = dgp_data, p = P)
betas_dgp <- beta %>% mutate(eq = row.names(beta)) %>% dplyr::select(eq, everything())
y_dgp <- melt(betas_dgp, id = c("eq")) %>% as.data.table() %>%
rename(betas_dgp = value) %>% mutate(eq = as.character(eq), variable=as.character(variable))
corr_dgp
betas_corr_df <- cbind(y_dgp %>% dplyr::select(betas_dgp), corr_dgp %>% dplyr::select(cov_estimate)) %>% as.data.table()
plot(x = betas_corr_df$cov_estimate, y = betas_corr_df$betas_dgp)
betas_corr_no_zero_df <- betas_corr_df %>% filter(betas_dgp != 0)
plot(x = betas_corr_no_zero_df$corr_estimate, y = betas_corr_no_zero_df$betas_dgp)
betas_corr_no_zero_df <- betas_corr_df %>% filter(betas_dgp != 0)
plot(x = betas_corr_no_zero_df$cov_estimate, y = betas_corr_no_zero_df$betas_dgp)
betas_corr_no_zero_positive_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp > 0))
plot(x = betas_corr_no_zero_positive_df$cov_estimate, y = betas_corr_no_zero_positive_df$betas_dgp)
betas_corr_no_zero_positive_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp < 0))
plot(x = betas_corr_no_zero_positive_df$cov_estimate, y = betas_corr_no_zero_positive_df$betas_dgp)
plot(x = betas_corr_df$cov_estimate, y = betas_corr_df$betas_dgp, xlab = "true phi's")
plot(x = betas_corr_df$cov_estimate, y = betas_corr_df$betas_dgp, ylab = "true phi's", xlab = "proxy phi's (covariance)")
plot(x = betas_corr_df$cov_estimate, y = betas_corr_df$betas_dgp, ylab = "True phi's", xlab = "Proxy phi's (covariance)")
plot(x = betas_corr_df$cov_estimate,
y = betas_corr_df$betas_dgp,
ylab = "True phi's", xlab = "Proxy phi's (covariance)", main = "True parameters of the VAR(1) model vs a proxy")
plot(x = betas_corr_df$cov_estimate,
y = betas_corr_df$betas_dgp,
ylab = "True phi's", xlab = "Proxy phi's (covariance)", main = "True parameters of the VAR(1) model vs a proxy (k=150, T=100)")
plot(x = betas_corr_df$cov_estimate,
y = betas_corr_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters of the VAR(1) model vs a proxy (k=150, T=100)")
betas_corr_no_zero_df <- betas_corr_df %>% filter(betas_dgp != 0)
plot(x = betas_corr_no_zero_df$cov_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (excluding phi=0) of the VAR(1) model vs a proxy (k=150, T=100)")
plot(x = betas_corr_no_zero_df$cov_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (excluding phi=0) of the VAR(1) \b model vs a proxy (k=150, T=100)")
plot(x = betas_corr_no_zero_df$cov_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (excluding phi=0) of the VAR(1) \non model vs a proxy (k=150, T=100)")
plot(x = betas_corr_no_zero_df$cov_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (excluding phi=0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
betas_corr_no_zero_df <- betas_corr_df %>% filter(betas_dgp != 0)
plot(x = betas_corr_no_zero_df$cov_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (phi > 0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
betas_corr_no_zero_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp < 0))
plot(x = betas_corr_no_zero_df$cov_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (phi > 0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
betas_corr_no_zero_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp > 0))
plot(x = betas_corr_no_zero_df$cov_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (phi > 0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
View(betas_corr_no_zero_df)
betas_corr_no_zero_positive_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp < 0))
plot(x = betas_corr_no_zero_positive_df$cov_estimate,
y = betas_corr_no_zero_positive_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (phi > 0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
P <- 1
T <- 100
K <- 150
seed <- 02021994
prob <- 0.1
network <- "random"
var_sim <- simulateVAR(N = K, p = P, nobs = T, sparsity=prob)
ts_dgp_df <- var_sim$series %>% as.data.table()
B <- var_sim$A[[1]]
ts.plot(ts_dgp_df, col=c(1:K))
beta <- B %>% as.data.table()
colnames(beta) <- gsub("V", "", colnames(beta))
dgp_data <- ts_dgp_df %>% as.data.table()
corr_dgp <- cov_combination_2x2(data = dgp_data, p = P)
betas_dgp <- beta %>% mutate(eq = row.names(beta)) %>% dplyr::select(eq, everything())
y_dgp <- melt(betas_dgp, id = c("eq")) %>% as.data.table() %>%
rename(betas_dgp = value) %>% mutate(eq = as.character(eq), variable=as.character(variable))
betas_corr_df <- cbind(y_dgp %>% dplyr::select(betas_dgp), corr_dgp %>% dplyr::select(cov_estimate)) %>% as.data.table()
plot(x = betas_corr_df$cov_estimate,
y = betas_corr_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters of the VAR(1) model vs a proxy (k=150, T=100)")
beta <- B %>% as.data.table()
colnames(beta) <- gsub("V", "", colnames(beta))
dgp_data <- ts_dgp_df %>% as.data.table()
corr_dgp <- corr_combination_2x2(data = dgp_data, p = P)
corr_dgp <- corr_combination_2x2(data = dgp_data, p = P)
corr_dgp
betas_corr_df <- cbind(y_dgp %>% dplyr::select(betas_dgp), corr_dgp %>% dplyr::select(corr_estimate)) %>% as.data.table()
betas_dgp <- beta %>% mutate(eq = row.names(beta)) %>% dplyr::select(eq, everything())
y_dgp <- melt(betas_dgp, id = c("eq")) %>% as.data.table() %>%
rename(betas_dgp = value) %>% mutate(eq = as.character(eq), variable=as.character(variable))
betas_corr_df <- cbind(y_dgp %>% dplyr::select(betas_dgp), corr_dgp %>% dplyr::select(corr_estimate)) %>% as.data.table()
plot(x = betas_corr_df$corr_estimate,
y = betas_corr_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (correlation)",
main = "True parameters of the VAR(1) model vs a proxy (k=150, T=100)")
corr_dgp <- lm_combination_2x2(data = dgp_data, p = P)
corr_dgp
betas_dgp <- beta %>% mutate(eq = row.names(beta)) %>% dplyr::select(eq, everything())
y_dgp <- melt(betas_dgp, id = c("eq")) %>% as.data.table() %>%
rename(betas_dgp = value) %>% mutate(eq = as.character(eq), variable=as.character(variable))
betas_corr_df <- cbind(y_dgp %>% dplyr::select(betas_dgp), corr_dgp %>% dplyr::select(beta_estimate)) %>% as.data.table()
plot(x = betas_corr_df$beta_estimate,
y = betas_corr_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (correlation)",
main = "True parameters of the VAR(1) model vs a proxy (k=150, T=100)")
betas_corr_no_zero_df <- betas_corr_df %>% filter(betas_dgp != 0)
plot(x = betas_corr_no_zero_df$cov_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (excluding phi=0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
betas_corr_no_zero_positive_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp < 0))
plot(x = betas_corr_no_zero_positive_df$cov_estimate,
y = betas_corr_no_zero_positive_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (phi < 0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
betas_corr_no_zero_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp > 0))
plot(x = betas_corr_no_zero_df$beta_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (phi > 0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
betas_corr_no_zero_df <- betas_corr_df %>% filter(betas_dgp != 0)
plot(x = betas_corr_no_zero_df$beta_estimate,
y = betas_corr_no_zero_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (excluding phi=0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
betas_corr_no_zero_positive_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp < 0))
plot(x = betas_corr_no_zero_positive_df$cov_estimate,
y = betas_corr_no_zero_positive_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (phi < 0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
betas_corr_no_zero_positive_df <- betas_corr_df %>% filter((betas_dgp != 0)&(betas_dgp < 0))
plot(x = betas_corr_no_zero_positive_df$beta_estimate,
y = betas_corr_no_zero_positive_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (covariance)",
main = "True parameters (phi < 0) of the VAR(1) \n model vs a proxy (k=150, T=100)")
plot(x = betas_corr_df$beta_estimate,
y = betas_corr_df$betas_dgp,
ylab = "True phi's",
xlab = "Proxy phi's (reg. betas 2x2)",
main = "True parameters of the VAR(1) model vs a proxy (k=150, T=100)")
corr_dgp <- cov_var_combination_2x2(data = dgp_data, p = P)
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/debug_gen_multivariate_tsp.R")
mts$series
ts.plot(mts$series, col=1:length(mts$series))
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/debug_gen_multivariate_tsp.R")
mts$series
# simulated time series
dgp_data <- mts$series %>% as.data.table()
dgp_data
fwrite(x = dgp_data,
file = file.path(new_folder, "data_dgp_train.csv"),
row.names = FALSE)
mts$sigma
# dgp covariance matrix ?
sigma <- mts$sigma %>% as.data.table()
colnames(sigma) <- gsub("V", "", colnames(sigma))
fwrite(x = sigma,
file = file.path(new_folder, "sigma_train.csv"),
row.names = FALSE)
# dgp betas
beta <- mts$A[[1]] %>% as.data.table()
colnames(beta) <- gsub("V", "", colnames(beta))
beta
fwrite(x = beta,
file = file.path(new_folder, "beta_train.csv"),
row.names = FALSE)
# sample covariance matrix
betas_dgp <- beta %>%
mutate(eq = row.names(beta)) %>%
dplyr::select(eq, everything())
y_dgp <- melt(betas_dgp, id = c("eq")) %>%
as.data.table() %>%
rename(betas_dgp = value) %>%
mutate(eq = as.character(eq), variable=as.character(variable))
betas_dgp
y_dgp
betas_dgp
cov_dgp <- cov_combination_2x2(data = dgp_data, p = p)
betadgp_covdgp_data <- merge(y_dgp, cov_dgp)
betadgp_covdgp_data
fwrite(x = betadgp_covdgp_data,
file = file.path(new_folder, "betadgp_covdgp_data_train.csv"),
row.names = FALSE)
corr_dgp
cov_dgp
corr_dgp <- cov_combination_2x2(data = dgp_data, p = P)
corr_dgp
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/utils/Rutils.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/debug_gen_multivariate_tsp.R")
x
y
tmp_data %>% dplyr::select(!!sym(y), !!sym(paste0(x, "_lag", i))) %>% tidyr::drop_na()
estimate_cov
estimate_cov
estimate_cov[1, 2]
vnumber
cov
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/utils/Rutils.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/debug_gen_multivariate_tsp.R")
cov
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/debug_gen_multivariate_tsp.R")
betadgp_data_test
beta2x2_data_test
corr_dgp_test
cov_dgp_test
1:@
1:2
list(1:2)
as.vector(1:2)
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
rm(list = ls())
gc()
library("SparseTSCGM")
library("dplyr")
library("data.table")
library("foreach")
library("stringr")
FILE_PATH <- getwd() # nolint
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH <- file.path(FILE_PATH, "src", "data", "inputs")
P <- 1
N <- 100
K_INIT <- 50
K <- 200
STEP <- 50
PROB_OF_CONNECTION <- 0.1
p=1
k=K_INIT
model <- paste0("ar", p)
output_name <- paste0(model, "_", k, "_", network)
output_name <- paste0(model, "_", k)
output_name
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/debug_gen_multivariate_tsp.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
?detectCores
??detectCores
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
??registerDoParallel
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/gen_multivariate_tsp.R")
