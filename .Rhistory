output_name = paste0(model, "_", k, "_", network)
model=MODELS
model
output_name = paste0(model, "_", k, "_", network)
new_folder = file.path(OUTPUT_PATH, output_name)
new_folder
data <- fread(new_folder)
data <- fread(file = file.path(new_folder, "data_dgp_test.csv"))
file.path(new_folder, "data_dgp_test.csv")
data <- fread(file = file.path(new_folder, "data_dgp_test.csv"))
?fread
data <- read.csv(file = file.path(new_folder, "data_dgp_test.csv"))
data <- fread(file = file.path(new_folder, "test_data_dgp.csv"))
head(data)
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/fix_file_names.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/fix_file_names.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
library("data.table")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
head(train_data)
ts.plot(train_data)
ts.plot(train_data[10:,])
ts.plot(train_data[10:150,])
ts.plot(train_data[5:150,])
ts.plot(train_data[2:150,])
# load test data
test_data <- fread(file = file.path(inputs_path, dir_name, paste0(d_name + "_test.csv")))
# load test data
test_data <- fread(file = file.path(inputs_path, dir_name, paste0(d_name , "_test.csv")))
test_data <- test_data[2:sim(test_data)[1], ]
test_data <- test_data[2:dim(test_data)[1], ]
test_data
ts.plot(test_data[2:150,])
colMeans(train_data)
std <- apply(train_data, 2, sd)
std
mean <- apply(train_data, 2, mean)
std <- apply(train_data, 2, sd)
train_data_zscore <- list()
for (colname in colnames(train_data)){
train_data_zscore[[colname]] <- (train_data[[colname]] - mean[colname]) / std[colname]
}
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
train_data[[colname]]
mean[colname]
mean[[colname]]
(train_data[[colname]] - mean[[colname]]) / std[[colname]]
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
head(train_data)
model
model_tag
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/models/penalized_var.R")
wrapper$data <- train_data
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/training/Runners.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
wrapper
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
wrapper
wrapper()
wrapper(data)
wrapper(data=train_data)
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/models/penalized_var.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/models/penalized_var.R")
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/run_var_elasticnet.R")
wrapper
wrapper$data <- train_data
wrapper$struct
wrapper$cv <- CV_TYPE
CV_TYPE
wrapper$verbose <- FALSE
verbose
wrapper$verbose <- verbose
wrapper$verbose
model_search <- constructModel(Y = wrapper$data,
p = wrapper$p,
struct = wrapper$struct,
gran = wrapper$gran,
h = wrapper$h,
cv = wrapper$cv,
verbose = wrapper$verbose,
IC = wrapper$IC,
model.controls=wrapper$model.controls)
wrapper$data
model_search <- constructModel(Y = wrapper$data,
p = wrapper$p,
struct = wrapper$struct,
gran = wrapper$gran,
h = wrapper$h,
cv = wrapper$cv,
verbose = wrapper$verbose,
IC = wrapper$IC,
model.controls=wrapper$model.controls)
model_search <- constructModel(Y = wrapper$data %>% as.matrix(),
p = wrapper$p,
struct = wrapper$struct,
gran = wrapper$gran,
h = wrapper$h,
cv = wrapper$cv,
verbose = wrapper$verbose,
IC = wrapper$IC,
model.controls=wrapper$model.controls)
results_model_search <- cv.BigVAR(model_search)
opt_lambda <- results_model_search@OptimalLambda
opt_lambda
rm(list=ls())
gc()
library('SparseTSCGM')
library('dplyr')
library("data.table")
FILE_PATH = getwd()
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
FILE_PATH
FILE_PATH = dirname(getwd())
FILE_PATH
FILE_PATH = dirname(getwd())
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar1")
N = 100
K_INIT = 150
K = 300
STEP = 50
SEED = 02021994
PROB_OF_CONNECTION = 0.1
NETWORKS = c("random")
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar1")
T = 100
K = 2
SEED = 02021994
PROB_OF_CONNECTION = 0.1
NETWORKS = c("random")
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=network)
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
mts$data1
mts$data1 %>% longitudinal_to_data.table()
mts$data1
beta
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar1")
T = 100
K = 3
SEED = 02021994
PROB_OF_CONNECTION = 0.1
NETWORKS = c("random")
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
View(longitudinal_to_data.table)
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/utils/Rutils.R")
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar1")
T = 100
K = 2
SEED = 02021994
PROB_OF_CONNECTION = 0.1
NETWORKS = c("random")
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
i
data
data[1]
data[,1]
dim(data)[1]
dgp_data = mts$data1 %>% longitudinal_to_data.table()
data[,i]
data
dim(data)[2]
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/utils/Rutils.R")
dgp_data = mts$data1 %>% longitudinal_to_data.table()
do.call("cbind", data_out)
do.call("cbind", data_out) %>% as.data.table()
source("~/Documents/Daniel/codes/nn-var-cov-pred/src/utils/Rutils.R")
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar1")
T = 100
K = 2
SEED = 02021994
PROB_OF_CONNECTION = 0.1
NETWORKS = c("random")
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
head(dgp_data)
ts.plot(dgp_data)
melt(dgp_data)
dgp_data
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
melt_dgp_data = melt(dgp_data)
tmp <- dgp_data
tmp$date = seq(1, dim(dgp_data))
tmp$date = seq(1, dim(dgp_data)[1])
tmp
melt_dgp_data = melt(tmp, "date")
melt_dgp_data
ggplot(data=covid_deaths, aes(x=date, y=value, group=variable, colour=variable)) +
geom_line() +
ggtitle("Daily Deaths for European countries in March,2020")+geom_point()
library("ggplot2")
ggplot(data=covid_deaths, aes(x=date, y=value, group=variable, colour=variable)) +
geom_line() +
ggtitle("Daily Deaths for European countries in March,2020")+geom_point()
ggplot(data=melt_dgp_data, aes(x=date, y=value, group=variable, colour=variable)) +
geom_line() +
ggtitle("Daily Deaths for European countries in March,2020")+geom_point()
ggplot(data=melt_dgp_data, aes(x=date, y=value, group=variable, colour=variable)) +
geom_line() +
ggtitle("Random samples from a VAR(1)")+geom_point()
ggplot(data=melt_dgp_data, aes(x=date, y=value, group=variable, colour=variable)) +
geom_line() +
ggtitle("Random samples from a VAR(1) process")+geom_point()
dgp_data
tmp
tmp <- dgp_data
tmp
colnames(tmp) = c("x_1t", "x_2t")
tmp <- dgp_data
colnames(tmp) = c("x_1t", "x_2t")
tmp$date = seq(1, dim(dgp_data)[1])
melt_dgp_data = melt(tmp, "date")
ggplot(data=melt_dgp_data, aes(x=date, y=value, group=variable, colour=variable)) +
geom_line() +
ggtitle("Random samples from a VAR(1) process")+geom_point()
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
beta
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar1")
T = 100
K = 2
SEED = 02021994
PROB_OF_CONNECTION = 0.1
NETWORKS = c("random")
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
beta
tmp <- dgp_data
colnames(tmp) = c("x_1t", "x_2t")
tmp$date = seq(1, dim(dgp_data)[1])
melt_dgp_data = melt(tmp, "date")
ggplot(data=melt_dgp_data, aes(x=date, y=value, group=variable, colour=variable)) +
geom_line() +
ggtitle("Random samples from a VAR(1) process")+geom_point()
mts$data1
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
beta
sigma
cov(dgp_data)
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar2")
T = 100
K = 2
SEED = 02021994
PROB_OF_CONNECTION = 0.1
NETWORKS = c("random")
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
sigma
beta
cov(dgp_data)
tmp <- dgp_data
colnames(tmp) = c("x_1t", "x_2t")
tmp$date = seq(1, dim(dgp_data)[1])
melt_dgp_data = melt(tmp, "date")
ggplot(data=melt_dgp_data, aes(x=date, y=value, group=variable, colour=variable)) +
geom_line() +
ggtitle("Random samples from a VAR(1) process")+geom_point()
t(beta)
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
sigma
t(beta)
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar2")
T = 100
K = 2
SEED = 02021994
PROB_OF_CONNECTION = 0.5
NETWORKS = c("random")
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
sigma
sigma
t(beta)
t(beta)
cov(dgp_data)
tmp <- dgp_data
colnames(tmp) = c("x_1t", "x_2t")
tmp$date = seq(1, dim(dgp_data)[1])
melt_dgp_data = melt(tmp, "date")
ggplot(data=melt_dgp_data, aes(x=date, y=value, group=variable, colour=variable)) +
geom_line() +
ggtitle("Random samples from a VAR(1) process")+geom_point()
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar2")
T = 100
K = 2
SEED = 02021994
PROB_OF_CONNECTION = 0.9
NETWORKS = c("random")
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
sigma
t(beta)
cov(dgp_data)
ccf(x = dgp_data$V1, y = dgp_data$V2)
ccf(x = dgp_data$V1, y = dgp_data$V2, lag.max = 2)
FILE_PATH = dirname(dirname(getwd()))
source(file.path(FILE_PATH, "src", "utils", "Rutils.R"))
OUTPUT_PATH = file.path(FILE_PATH, "src", "data", "inputs")
MODELS = c("ar2")
T = 1000
K = 2
SEED = 02021994
PROB_OF_CONNECTION = 0.9
NETWORKS = c("random")
mts = sim.data(model=MODELS[1],
time=1,
n.obs=T,
n.var=K,
seed=SEED,
prob0=PROB_OF_CONNECTION,
network=NETWORKS[1])
sigma = mts$sigma %>% as.data.table()
colnames(sigma) = gsub("V", "", colnames(sigma))
beta = mts$gamma %>% as.data.table()
colnames(beta) = gsub("V", "", colnames(beta))
dgp_data = mts$data1 %>% longitudinal_to_data.table()
sigma
t(beta)
cov(dgp_data)
ccf(x = dgp_data$V1, y = dgp_data$V2, lag.max = 2)
ccf(x = dgp_data$V1, y = dgp_data$V2, lag.max = 2)
pacf(x = dgp_data$V1)
pacf(x = dgp_data$V1, lag.max = 3)
dim(dgp_data)[2]
colnames(X) = c("X_1t", "X_2t")
X = dgp_data
colnames(X) = c("X_1t", "X_2t")
X[[paste0("X_1t")]]
lag(X[[paste0("X_1t")]])
X[[paste0("X_", j, "t", i)]] = lag(X[[paste0(paste0("X_", j, "t"))]], n = i)
colnames(X) = c("X_1t", "X_2t")
for (i in 1:2){
for (j in 1:dim(dgp_data)[2]){
X[[paste0("X_", j, "t", i)]] = lag(X[[paste0(paste0("X_", j, "t"))]], n = i)
}
}
X
View(X)
dim(X)
cov(X)
cov(X %>% drop_na())
library("tidyr")
cov(X %>% drop_na())
